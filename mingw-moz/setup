#!/usr/bin/env bash

set -x # Show commands
set -eu # Errors/undefined vars are fatal
set -o pipefail # Check all commands in a pipeline

date

echo Downloading mingw repo
pushd $INDEX_ROOT
if [ -d "git" ]
then
    echo "Found pre-existing folder; skipping re-download."
else
    wget -nv https://s3-us-west-2.amazonaws.com/searchfox.repositories/mingw.tar
    tar xf mingw.tar
    rm mingw.tar
fi
popd

date

echo Downloading mingw blame.
pushd $INDEX_ROOT
if [ -d "blame" ]
then
    echo "Found pre-existing blame folder; skipping re-download."
else
    wget -nv https://s3-us-west-2.amazonaws.com/searchfox.repositories/mingw-blame.tar
    tar xf mingw-blame.tar
    rm mingw-blame.tar
fi
popd

date

MOZ_REV=$(curl -SsfL "https://hg.mozilla.org/mozilla-central/raw-file/tip/taskcluster/ci/fetch/toolchains.yml" | yq -r '.["mingw-w64"].fetch.revision')

echo Updating git
pushd $GIT_ROOT
git pull origin master
git reset --hard ${MOZ_REV}
popd

echo Generating blame information
$MOZSEARCH_PATH/tools/target/release/build-blame $GIT_ROOT $BLAME_ROOT

# Check out the blame rev corresponding to MOZ_REV, since the blame
# repo may be ahead of it.

pushd $BLAME_ROOT
BLAME_REV=$(git log -1 --grep=$MOZ_REV --pretty=format:%H)
if [ -z "$BLAME_REV" ]; then
    echo "mingw-moz: Unable to find blame rev for $MOZ_REV"
    exit 1;
fi
git reset --soft $BLAME_REV
popd

date

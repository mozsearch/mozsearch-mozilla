#!/usr/bin/env bash

set -x # Show commands
set -eu # Errors/undefined vars are fatal
set -o pipefail # Check all commands in a pipeline

date

echo Downloading mozilla-mobile repo
pushd $INDEX_ROOT
if [ -d "git" ]
then
    echo "Found pre-existing mozilla-mobile folder; skipping re-download."
else
    wget -nv https://s3-us-west-2.amazonaws.com/searchfox.repositories/mozilla-mobile.tar
    tar xf mozilla-mobile.tar
    rm mozilla-mobile.tar
fi
popd

date

echo Updating git
pushd $GIT_ROOT
# pull latest moz-mob code.  We run this twice because of problems experienced
# at https://bugzilla.mozilla.org/show_bug.cgi?id=1596846#c7.  This may be a
# workaround for a git regression, as this didn't happen to 2.20.1 but did
# happen on 2.24.0 and there were various changelog comments about changing when
# various things were resolved.  For example,
# https://github.com/git/git/blob/master/Documentation/RelNotes/2.23.0.txt#L36
#
# the prune stuff is to deal with encountering this error:
#   error: cannot lock ref 'refs/remotes/origin/mergify': 'refs/remotes/origin/mergify/bp/main/pr-5560' exists; cannot create 'refs/remotes/origin/mergify'
# I'm wrapping it in the and because we still want to do the update.
git submodule update --remote || git submodule update --remote || (git submodule foreach --recursive git remote prune origin && git submodule update --remote)
# The previous step will update the submodules of this top-level synthetic superproject,
# and now we want to commit those changes, so that the top-level superproject points
# to the latest version of each submodule.
git add *
git commit --allow-empty -am "Submodule update at $(date)" --author "Searchfox Indexer <searchfox-aws@mozilla.com>"
# And then we update the nested submodules to the revision desired by the top-level submodules.
git submodule update --init --recursive
popd

date

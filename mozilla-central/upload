#!/usr/bin/env bash

set -x # Show commands
set -eu # Errors/undefined vars are fatal
set -o pipefail # Check all commands in a pipeline

date

echo Uploading Gecko
pushd $INDEX_ROOT
tar cf gecko.tar gecko-dev
# If the tarball gets bigger than 10GB, re-compress the repo
TARBALL_SIZE=$(stat -c '%s' gecko.tar)
TEN_GIGS=$((10 * 1000 * 1000 * 1000))
if [ $TARBALL_SIZE -gt $TEN_GIGS ]; then
    git --git-dir=gecko-dev/.git gc
    tar cf gecko.tar gecko-dev
    # If it's still bigger than 10GB, spit out a warning
    TARBALL_SIZE=$(stat -c '%s' gecko.tar)
    if [ $TARBALL_SIZE -gt $TEN_GIGS ]; then
        echo "WARNING: gecko.tar is bigger than 10GB even after git gc. Try more aggressive gc, or increase size limit"
    fi
fi
$AWS_ROOT/upload.py $INDEX_ROOT/gecko.tar searchfox.repositories gecko.tar
rm gecko.tar
popd

date

echo Uploading Gecko blame
pushd $INDEX_ROOT
tar cf gecko-blame.tar gecko-blame
# If the tarball gets bigger than 5GB, re-compress the repo
TARBALL_SIZE=$(stat -c '%s' gecko-blame.tar)
FIVE_GIGS=$((5 * 1000 * 1000 * 1000))
if [ $TARBALL_SIZE -gt $FIVE_GIGS ]; then
    git --git-dir=gecko-blame/.git gc
    tar cf gecko-blame.tar gecko-blame
    # If it's still bigger than 5GB, spit out a warning
    TARBALL_SIZE=$(stat -c '%s' gecko-blame.tar)
    if [ $TARBALL_SIZE -gt $FIVE_GIGS ]; then
        echo "WARNING: gecko-blame.tar is bigger than 5GB even after git gc. Try more aggressive gc, or increase size limit"
    fi
fi
$AWS_ROOT/upload.py $INDEX_ROOT/gecko-blame.tar searchfox.repositories gecko-blame.tar
rm gecko-blame.tar
popd

date

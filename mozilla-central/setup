#!/usr/bin/env bash

set -x # Show commands
set -eu # Errors/undefined vars are fatal
set -o pipefail # Check all commands in a pipeline

date

# This defaults to the most recent searchfox indexing run for mozilla-central.
REVISION_TREE=mozilla-central
REVISION_ID=latest

# Set TRYPUSH_REV in the environment to e.g. ee64db93dcc149da9313460317257b8c42eec5b2
# or whatever to test a try revision. It needs to be the full rev hash, so that we can
# find the artifacts in taskcluster.
TRYPUSH_REV=${TRYPUSH_REV:-}
if [ -n "$TRYPUSH_REV" ]; then
    REVISION_TREE=try
    REVISION_ID="revision.${TRYPUSH_REV}"
fi

# The next line populates the INDEXED_HG_REV and PREEXISTING_HG_REV env vars.
# Note that PREEXISTING_HG_REV will generally be empty in production.
source $CONFIG_REPO/shared/resolve-gecko-revs.sh $REVISION_TREE $REVISION_ID

$CONFIG_REPO/shared/checkout-gecko-repos.sh $REVISION_TREE "master" "$INDEXED_HG_REV"

$CONFIG_REPO/shared/fetch-tc-artifacts.sh $REVISION_TREE $INDEXED_HG_REV "$PREEXISTING_HG_REV"

date

# Also generate blame for some other branches, because the gecko-blame repo is
# shared by those branches. We do this here instead of in e.g. ../mozilla-beta/setup
# because it's best to have only one indexer instance responsible for updating and
# pushing the tarball to S3, to avoid accidental clobbers. It's not a great situation
# architecturally, but it's better for performance.
#
# Base case for dynamic branch creation, see below.
LASTBRANCH="master"
# If you are adding branches, add them after the branch they forked off of,
# putting the branch at the front of the list if they forked off of m-c.  So
# in the case of new ESR branches (which fork off of "release"), they go after
# release and before existing ESR branches.
for BRANCH in pine beta release esr78 esr68 esr60 esr45 esr31 esr17; do
    echo "Updating gecko-dev branch $BRANCH to latest from cinnabar upstream..."
    pushd $GIT_ROOT
    git branch -f $BRANCH $BRANCH/branches/default/tip
    popd
    echo "Generating blame information for $BRANCH..."
    # Check if there's a branch in the blame repo yet, and if there isn't, fork
    # it from the previous branch in the list, with a base case of "master".
    git -C $BLAME_ROOT show-ref --verify --quiet "refs/heads/${BRANCH}" || git -C $BLAME_ROOT branch "${BRANCH}" "${LASTBRANCH}"
    BLAME_REF="refs/heads/$BRANCH" $MOZSEARCH_PATH/tools/target/release/build-blame $GIT_ROOT $BLAME_ROOT
    LASTBRANCH="${BRANCH}"
done

date

#!/usr/bin/env bash

set -x # Show commands
set -eu # Errors/undefined vars are fatal
set -o pipefail # Check all commands in a pipeline

date

# Edit this to e.g. try.revision.ee64db93dcc149da9313460317257b8c42eec5b2 or whatever
# to test other revisions. If you do this, also set TRY_GIT_REV to some sane
# git-equivalent of the revision because most likely it won't find anything in the mapfile.
# This defaults to the most recent searchfox indexing run for mozilla-central.
REVISION_TREE=mozilla-central       # replace with e.g. 'try' for testing
REVISION_ID=latest                  # replace with e.g. 'revision.ee64db93dcc149da9313460317257b8c42eec5b2' for testing
TRY_GIT_REV=                        # set to some gecko-dev SHA matching the above rev for testing

# The next line populates the INDEXED_HG_REV and INDEXED_GIT_REV env vars.
source $CONFIG_REPO/shared/resolve-gecko-revs.sh $REVISION_TREE $REVISION_ID

# If INDEXED_GIT_REV gets set to non-empty, that means the gecko-dev repo includes
# code indexed in the taskcluster job. So we can download the result of that indexing
# job and use it. Otherwise, it means gecko-dev is lagging behind the canonical hg
# repo, and we don't have the source corresponding to the indexing run on taskcluster.
# In that case we don't use the analysis data at all, and offer plaintext search and
# blame on the latest gecko-dev that we do have. In practice this scenario rarely
# gets hit.

$CONFIG_REPO/shared/checkout-gecko-repos.sh "master" "$INDEXED_GIT_REV"

if [ -n "$INDEXED_GIT_REV" ]; then
    pushd $INDEX_ROOT
    $CONFIG_REPO/shared/fetch-tc-artifacts.sh $REVISION_TREE $INDEXED_HG_REV
    popd

    date
else
    echo "ERROR: Unable to find git equivalent for hg rev $INDEXED_HG_REV; please fix the mapper and retry."
    exit 1
fi

# Also generate blame for some other branches, because the gecko-blame repo is
# shared by those branches. We do this here instead of in e.g. ../mozilla-beta/setup
# because it's best to have only one indexer instance responsible for updating and
# pushing the tarball to S3, to avoid accidental clobbers. It's not a great situation
# architecturally, but it's better for performance.
for BRANCH in beta release esr60 esr68; do
    echo "Updating gecko-dev branch $BRANCH to latest from upstream..."
    pushd $GIT_ROOT
    git branch -f $BRANCH origin/$BRANCH || git branch -f $BRANCH projects/$BRANCH
    popd
    echo "Generating blame information for $BRANCH..."
    CINNABAR=1 BLAME_REF="refs/heads/$BRANCH" python $MOZSEARCH_PATH/blame/transform-repo.py $GIT_ROOT $BLAME_ROOT
done

date

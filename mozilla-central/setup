#!/usr/bin/env bash

set -x # Show commands
set -eu # Errors/undefined vars are fatal
set -o pipefail # Check all commands in a pipeline

date

echo Downloading Gecko
pushd $INDEX_ROOT
$CONFIG_REPO/shared/fetch-gecko-tarball.sh gecko-dev $PWD
popd

date

echo Downloading Gecko blame
pushd $INDEX_ROOT
$CONFIG_REPO/shared/fetch-gecko-tarball.sh gecko-blame $PWD
popd

date

echo Downloading git to hg map
$CONFIG_REPO/shared/fetch-hg-map.sh

date

echo Updating git
pushd $GIT_ROOT
# The repo may have been uploaded while checked out to some non-master
# revision (to match the hg revision used in taskcluster)
git checkout master
git pull
popd

date

# Edit this to e.g. try.revision.ee64db93dcc149da9313460317257b8c42eec5b2 or whatever
# to test other revisions. If you do this, also override INDEXED_GIT_REV below to some sane
# git-equivalent of the revision because most likely it won't find anything in the mapfile.
# This defaults to the most recent searchfox indexing run for mozilla-central.
REVISION_TREE=mozilla-central       # replace with e.g. 'try' for testing
REVISION_ID=latest                  # replace with e.g. 'revision.ee64db93dcc149da9313460317257b8c42eec5b2' for testing
REVISION="${REVISION_TREE}.${REVISION_ID}"

CURL="curl -SsfL --compressed"

pushd $INDEX_ROOT
${CURL} https://index.taskcluster.net/v1/task/gecko.v2.$REVISION.firefox.linux64-searchfox-debug/artifacts/public/build/target.json > target.json
INDEXED_HG_REV=$(python $MOZSEARCH_PATH/scripts/read-json.py target.json moz_source_stamp)
INDEXED_GIT_REV=$(awk -v REV=$INDEXED_HG_REV '$2 ~ REV { print $1 }' "${WORKING}/git_hg.map")

# If INDEXED_GIT_REV gets set, that means the gecko-dev repo includes the code for which
# the taskcluster indexing job ran. So we can download the result of that indexing
# job and use it. Otherwise, it means gecko-dev is lagging behind the canonical hg
# repo, and we don't have the source corresponding to the indexing run on taskcluster.
# In that case we don't use the analysis data at all, and offer plaintext search and
# blame on the latest gecko-dev that we do have. In practice this scenario rarely
# gets hit.

if [ -n "$INDEXED_GIT_REV" ]; then
    pushd $GIT_ROOT
    # Since we're using a prebuilt index at a particular rev, sync our local repo to the same rev
    git checkout $INDEXED_GIT_REV
    popd

    date

    $CONFIG_REPO/shared/fetch-tc-artifacts.sh $REVISION_TREE $INDEXED_HG_REV

    date

    $CONFIG_REPO/shared/process-gecko-analysis.sh

    date
else
    echo "WARNING: Unable to find git equivalent for hg rev $INDEXED_HG_REV; omitting Rust/C++ analysis..."
fi
popd

date

# Generate the blame information after checking out the GIT_ROOT to appropriate
# revision above, so that the blame repo's head matches the git repo's head.
echo "Generating blame information for central..."
python $MOZSEARCH_PATH/blame/transform-repo.py $GIT_ROOT $BLAME_ROOT $WORKING/git_hg.map

# Also generate blame for some other branches, because the gecko-blame repo is
# shared by those branches. We do this here instead of in e.g. ../mozilla-beta/setup
# because it's best to have only one indexer instance responsible for updating and
# pushing the tarball to S3, to avoid accidental clobbers. It's not a great situation
# architecturally, but it's better for performance.
for BRANCH in beta release esr60; do
    echo "Updating gecko-dev branch $BRANCH to latest from upstream..."
    pushd $GIT_ROOT
    git branch -f $BRANCH origin/$BRANCH
    popd
    echo "Generating blame information for $BRANCH..."
    BLAME_REF="refs/heads/$BRANCH" python $MOZSEARCH_PATH/blame/transform-repo.py $GIT_ROOT $BLAME_ROOT $WORKING/git_hg.map
done

# Point the blame repo's HEAD to the commit matching what we have in in the src repo. Note
# that we use `git reset --soft` because we don't need anything in the repo's working dir.
if [ -n "$INDEXED_GIT_REV" ]; then
    pushd $BLAME_ROOT
    BLAME_REV=$(git log -1 --grep=$INDEXED_GIT_REV --pretty=format:%H)
    if [ -z "$BLAME_REV" ]; then
        echo "Unable to find blame rev for $INDEXED_GIT_REV"
        exit 1;
    fi
    git reset --soft $BLAME_REV
    popd
fi

date
